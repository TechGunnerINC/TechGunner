generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB")
}

model user {
  id          String           @id @default(uuid())
  username    String           @unique
  name        String
  about       String?          @db.Text
  email       String           @unique
  password    String           @db.Text
  followers   Int              @default(0)
  interests   String[]
  following   following[]
  banner      String?          @db.Text
  skillName   String           @default("No skill were mentioned")
  skillLevel  String?
  langName    String           @default("No language was mentioned")
  langLevel   String?
  level       Levels           @default(Silent_Soul)
  points      Int              @default(0)
  needs       Int              @default(100)
  links       String[]         @default(["No links provided"])
  verified    Boolean          @default(false)
  pp          String           @default("a") @db.Text
  role        Roles            @default(User)
  gigs        gig[]
  joined      DateTime         @default(now())
  blogs       blog[]
  messages    messages[]
  review      reviews[]
  shistory    search_history[]
  history     history[]
  videos      videos[]
  post        post[]
  collections collection[]
}

model collection {
  id    String @id @default(uuid())
  name  String @default("Untitled")
  des   String @default("No Description")
  user  user   @relation(fields: [owner], references: [username], onDelete: Cascade)
  owner String
}

model following {
  id           Int     @id @default(autoincrement())
  notification Boolean @default(false)
  user         user    @relation(fields: [owner], references: [username], onDelete: Cascade)
  owner        String
}

model videos {
  id        String     @id @default(uuid())
  url       String     @db.Text
  title     String
  owner     String
  des       String     @db.Text
  published Boolean    @default(false)
  cover     String     @db.Text
  created   DateTime   @default(now())
  updated   DateTime   @updatedAt
  likes     Int        @default(0)
  dislikes  Int        @default(0)
  views     Int        @default(0)
  category  String[]
  tags      String[]
  user      user       @relation(fields: [owner], references: [username], onDelete: Cascade)
  comments  comments[]
  history   history[]
}

model post {
  id        String     @id @default(uuid())
  url       String     @db.Text
  title     String
  owner     String
  des       String
  published Boolean    @default(false)
  cover     String     @db.Text
  created   DateTime   @default(now())
  updated   DateTime   @updatedAt
  likes     Int        @default(0)
  dislikes  Int        @default(0)
  views     Int        @default(0)
  category  String[]
  tags      String[]
  user      user       @relation(fields: [owner], references: [username], onDelete: Cascade)
  comments  comments[]
  history   history[]
}

model blog {
  id        String     @id @default(uuid())
  title     String
  owner     String
  content   String     @db.Text
  published Boolean    @default(false)
  cover     String     @db.Text
  pics      String?    @db.Text
  created   DateTime   @default(now())
  updated   DateTime   @updatedAt
  likes     Int        @default(0)
  dislikes  Int        @default(0)
  views     Int        @default(0)
  tags      String[]
  category  String[]
  user      user       @relation(fields: [owner], references: [username], onDelete: Cascade)
  comments  comments[]
  history   history[]
}

model comments {
  id      String  @id @default(uuid())
  comment String  @db.Text
  bId     String?
  blog    blog?   @relation(fields: [bId], references: [id], onDelete: Cascade)
  videos  videos? @relation(fields: [vId], references: [id], onDelete: Cascade)
  vId     String?
  post    post?   @relation(fields: [pId], references: [id], onDelete: Cascade)
  pId     String?
}

model messages {
  id        String   @id @default(uuid())
  owner     String
  message   String
  seen      Boolean  @default(false)
  sent_at   DateTime @default(now())
  edited_at DateTime @updatedAt
  user      user     @relation(fields: [owner], references: [username], onDelete: Cascade)
}

model search_history {
  id          String   @id @default(uuid())
  owner       String
  query       String
  searched_at DateTime @default(now())
  user        user     @relation(fields: [owner], references: [username], onDelete: Cascade)
}

model gig {
  id     String    @id @default(uuid())
  title  String
  des    String
  price  Int
  cover  String    @db.Text
  stars  Float     @default(0.0)
  review reviews[]
  user   user      @relation(fields: [owner], references: [username], onDelete: Cascade)
  owner  String
}

model reviews {
  id     Int    @id @default(autoincrement())
  review String @db.Text
  user   user   @relation(fields: [owner], references: [username], onDelete: Cascade)
  owner  String
  gig    gig    @relation(fields: [sId], references: [id], onDelete: Cascade)
  sId    String
}

model history {
  id         String   @id @default(uuid())
  owner      String
  bid        String?
  watched_at DateTime @default(now())
  user       user     @relation(fields: [owner], references: [username], onDelete: Cascade)
  blogs      blog?    @relation(fields: [bid], references: [id], onDelete: Cascade)
  videos     videos?  @relation(fields: [vId], references: [id], onDelete: Cascade)
  vId        String?
  pic        post?    @relation(fields: [pId], references: [id], onDelete: Cascade)
  pId        String?
}

enum Roles {
  SuperAdmin
  BasicAdmin
  Modrator
  PriniumUser
  DimondUser
  User
  Admin
  Member
  Advertiser
}

enum Levels {
  Cyber_Celeb
  Content_Commander
  The_Cosmic_Lion
  King_of_Content
  Neon_Ninja
  Electric_Knight
  The_Blazing_Beacon
  Dashing_Diamond
  Legion_of_Content
  Silent_Soul
  Neon_Dragon
  The_Blazing_Souls_of_Creators
  The_Content_Wizard
}
